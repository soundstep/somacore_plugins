/** * The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in compliance * with the License. You may obtain a copy of the License at *  * http://www.mozilla.org/MPL/ *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. * See the License for the specific language governing rights and * limitations under the License. *  * The Original Code is SomaDebugger. *  * The Initial Developer of the Original Code is Romuald Quantin. * romu@soundstep.com (www.soundstep.com). *  * Portions created by *  * Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved. * All Rights Reserved. *  */  package com.soma.debugger.views {	import com.soma.debugger.events.SomaDebuggerGCEvent;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Class version:</b> v1.0.1<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b>	 * Mozilla Public License 1.1 (MPL 1.1)<br /> 	 * <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a><br />	 * <br />	 * <b>Usage:</b><br />	 * @example	 * <listing version="3.0">	 * </listing>	 */		public class SomaDebuggerGC extends Sprite {		//------------------------------------		// private, protected properties		//------------------------------------				private var _widthBar:Number;        private var _heightBar:Number;                private var _bg:Shape;        private var _hit:Sprite;        private var _text:TextField;        private var _force:TextField;        private var _forceButton:Sprite;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				public function SomaDebuggerGC(widthBar:Number = 500, heightBar:Number = 15) {			_widthBar = widthBar;			_heightBar = heightBar;			initialize();		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function initialize():void {			// background			_bg = new Shape();            _bg.graphics.beginFill(0xABABAB, 1);            _bg.graphics.drawRect(0, 0, _widthBar, _heightBar);			_bg.graphics.endFill();            addChild(_bg);            // text            _text = new TextField();            var tf:TextFormat = new TextFormat("_typewriter", 10);            _text.defaultTextFormat = tf;            _text.y +=1;            _text.autoSize=TextFieldAutoSize.LEFT;            _text.textColor = 0x333333;            _text.selectable = false;            addChild(_text);            // force            _forceButton = new Sprite();            _forceButton.buttonMode = true;            _forceButton.mouseChildren = false;			_force = new TextField();            _force.text = "force";			tf.letterSpacing = -1;            _force.defaultTextFormat = tf;            _force.autoSize=TextFieldAutoSize.LEFT;            _force.textColor = 0x000000;            _force.selectable = false;            _force.x = _widthBar - _force.width - 3;			_force.y +=1;            _forceButton.addEventListener(MouseEvent.CLICK, forceGC);			_forceButton.addChild(_force);            addChild(_forceButton);            updateWatchers(0, 0);
			// hit area			_hit = new Sprite();			_hit.buttonMode = true;			_hit.mouseChildren = false;            _hit.graphics.beginFill(0xFF0000, 0);            _hit.graphics.drawRect(0, 0, _force.x, _heightBar);			_hit.graphics.endFill();            addChild(_hit);		}				private function forceGC(e:MouseEvent):void {
			dispatchEvent(new SomaDebuggerGCEvent(SomaDebuggerGCEvent.FORCE_GC));
		}		// PUBLIC		//________________________________________________________________________________________________				public function updateWatchers(num:Number, max:Number):void {			_text.text = "Garbage Collection - retained: " + num + "/" + max;		}				public function get hit():Sprite {			return _hit;		}				public function dispose() : void {			// dispose objects, graphics and events listeners			try {				_forceButton.removeEventListener(MouseEvent.CLICK, forceGC);				_forceButton.removeChild(_force);				while (numChildren > 0) removeChildAt(0);				_bg = null;				_hit = null;		        _text = null;		        _force = null;		        _forceButton = null;			} catch(e:Error) {				trace("Error in", this, "(dispose method):", e.message);			}		}	}}