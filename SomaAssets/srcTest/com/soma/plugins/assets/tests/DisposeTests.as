package com.soma.plugins.assets.tests {	import flash.text.StyleSheet;	import org.flexunit.asserts.fail;	import org.flexunit.async.Async;	import com.soma.plugins.assets.events.SomaAssetsEvent;	import com.soma.core.di.SomaInjector;	import org.flexunit.asserts.assertFalse;	import com.soma.assets.loader.core.IAssetLoader;	import org.flexunit.asserts.assertTrue;	import org.flexunit.asserts.assertNotNull;	import com.soma.plugins.assets.wires.SomaAssetsWire;	import org.flexunit.asserts.assertNull;	import com.soma.core.Soma;	import com.soma.core.interfaces.ISoma;	import com.soma.plugins.assets.SomaAssets;	import com.soma.plugins.assets.vo.SomaAssetsVO;	import mx.core.FlexGlobals;	import flash.display.Stage;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Date:</b> Oct 6, 2010<br />	 * @example	 * <listing version="3.0"></listing>	 */	public class DisposeTests {				private var _soma:ISoma;		private var _plugin:SomaAssets;
				private var _somaInjector:Soma;		private var _pluginInjector:SomaAssets;				private static var _stage:Stage;		private static var _configXML:XML;				[BeforeClass]		public static function runBeforeClass():void {			_stage = FlexGlobals.topLevelApplication.stage;
			_configXML = <loader connections="3">				<group id="group0" connections="1" preventCache="true">					<group id="group00" connections="1" preventCache="true">						<asset id="img0" src="assets/img/image00.jpg" smoothing="true" transparent="true" weight="174015"/>						<asset id="img1" src="assets/img/image01.jpg" smoothing="true" transparent="true" weight="165158"/>					</group>					<asset id="img2" src="assets/img/image02.jpg" fillColor="0xFF0000" smoothing="true" transparent="true" weight="156926"/>					<asset id="img3" src="assets/img/image03.jpg" fillColor="0xFF0000" smoothing="true" transparent="true" weight="177053"/>				</group>				<group id="group1" connections="2" preventCache="true">					<asset id="swf0" src="assets/swf/flash0.swf" priority="1" weight="1915"/>					<asset id="swf1" src="assets/swf/flash1.swf" priority="2" weight="2005"/>				</group>				<asset id="css" src="assets/css/stylesheet.css" preventCache="true" weight="352"/>				<asset id="json" src="assets/json/data.json" preventCache="true" weight="582"/>				<asset id="sound" src="assets/sounds/sample.mp3" preventCache="true" weight="16718"/>				<asset id="text" src="assets/text/text.txt" preventCache="true" weight="574"/>				<asset id="xml" src="assets/xml/sample.xml" preventCache="true" weight="79"/>				<asset id="video" src="assets/video/sample.flv" weight="1550580"/>				<asset id="zip" src="assets/zip/file.zip" weight="3493"/>			</loader>;		}				[AfterClass]		public static function runAfterClass():void {			_stage = null;		} 				[Before]		public function runBefore():void {			_soma = new Soma(_stage);			_plugin = _soma.createPlugin(SomaAssets, new SomaAssetsVO(_soma)) as SomaAssets;			_plugin.addConfig(_configXML);			_somaInjector = new Soma(_stage, SomaInjector);			_pluginInjector = _somaInjector.createPlugin(SomaAssets, new SomaAssetsVO(_somaInjector)) as SomaAssets;			_pluginInjector.addConfig(_configXML);		}				[After]		public function runAfter():void {
			_plugin.dispose();			_soma.dispose();			_pluginInjector.dispose();			_somaInjector.dispose();			_plugin = null;			_soma = null;			_pluginInjector = null;			_somaInjector = null;		}		
		[Test]		public function testDispose():void {			_plugin.dispose();		}				[Test]		public function testDisposePlugin():void {			assertNotNull(_plugin.wire);			assertNotNull(_plugin.vo);			assertNotNull(_plugin.config);			_plugin.dispose();			assertNull(_plugin.wire);			assertNull(_plugin.vo);			assertNull(_plugin.config);		}				[Test]		public function testDisposeWire():void {			var wire:SomaAssetsWire = _plugin.wire;			assertNotNull(wire.loader);			wire.dispose();			assertNull(wire.loader);			assertNull(wire.config);		}				[Test]		public function testDisposeVO():void {			var vo:SomaAssetsVO = _plugin.vo;			assertNotNull(vo.instance);			vo.dispose();			assertNull(vo.instance);		}				[Test]		public function testDisposeInjectionNameGlobal():void {			assertTrue(_somaInjector.injector.hasMapping(SomaAssets, SomaAssets.INJECTION_NAME));			assertTrue(_somaInjector.injector.hasMapping(IAssetLoader, SomaAssets.INJECTION_NAME));			assertTrue(_somaInjector.injector.hasMapping(XML, SomaAssets.INJECTION_NAME));			_pluginInjector.dispose();			assertFalse(_somaInjector.injector.hasMapping(SomaAssets, SomaAssets.INJECTION_NAME));			assertFalse(_somaInjector.injector.hasMapping(IAssetLoader, SomaAssets.INJECTION_NAME));			assertFalse(_somaInjector.injector.hasMapping(XML, SomaAssets.INJECTION_NAME));		}				[Test(async)]		public function testDisposeInjectionNameAsset():void {			_somaInjector.addEventListener(SomaAssetsEvent.LOADER_COMPLETE, Async.asyncHandler(this, testDisposeInjectionNameAssetSuccess, 500, null, testDisposeInjectionNameAssetFailed));			_pluginInjector.loader.start();		}				private function testDisposeInjectionNameAssetSuccess(event:SomaAssetsEvent, data:Object):void {			data;			assertNotNull(_pluginInjector.getAssets("css"));			assertTrue(_somaInjector.injector.hasMapping(StyleSheet, "css"));			_pluginInjector.dispose();			assertFalse(_somaInjector.injector.hasMapping(StyleSheet, "css"));		}				private function testDisposeInjectionNameAssetFailed(event:SomaAssetsEvent):void {			fail("testDisposeInjectionNameAsset failed on time out");		}			}}
